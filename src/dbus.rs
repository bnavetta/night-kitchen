//! D-Bus bindings generated by [dbus-codegen-rust](https://github.com/diwic/dbus-rs/tree/master/dbus-codegen)
use std::time::Duration;

use anyhow::{Result, Context};
use dbus::blocking::{Connection, Proxy};

use crate::dbus::systemd::OrgFreedesktopSystemd1Manager;

pub mod logind;
pub mod systemd;
pub mod systemd_timer;

const PROXY_TIMEOUT: Duration = Duration::from_millis(500);

/// Creates a D-Bus connection proxy referring to the systemd-logind manager API object
pub fn login_manager<'a>(connection: &'a Connection) -> Proxy<'a, &'a Connection> {
    connection.with_proxy(
        "org.freedesktop.login1",
        "/org/freedesktop/login1",
        PROXY_TIMEOUT,
    )
}

/// Creates a D-Bus connection proxy referring to the systemd manager API object
pub fn systemd_manager<'a>(connection: &'a Connection) -> Proxy<'a, &'a Connection> {
    connection.with_proxy(
        "org.freedesktop.systemd1",
        "/org/freedesktop/systemd1",
        PROXY_TIMEOUT
    )
}

/// Creates a D-Bus connection proxy referring to the systemd unit with the given name. Fails if the unit
/// does not exist or its D-Bus path cannot be determined for other reasons.
pub fn systemd_unit<'a>(connection: &'a Connection, unit_name: &str) -> Result<Proxy<'a, &'a Connection>> {
    let manager = systemd_manager(connection);
    let unit_path = manager.get_unit(unit_name)
        .with_context(|| format!("Could not find D-Bus path for systemd unit {}", unit_name))?;

    Ok(connection.with_proxy(
        "org.freedesktop.systemd1",
        unit_path,
        PROXY_TIMEOUT
    ))
}